---
title: "Data cleaning Final"
author: "Devinn Chi and Chris Lohmeier"
date: "2024-02-04"
output: html_document
---


# Knit
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


# Load Packages
```{r, warning = FALSE, message = FALSE}
library(tidyverse)
library(dplyr)
library(readr)
library(jsonlite)
library(skimr)
library(lubridate)
library(ggpubr)
library(cowplot)
library(broom)
library(gtools)
library(corrplot)
library(RColorBrewer)
```


# CLEANING DATA START ----------------------------------------------------------------------------------------------------------------------------


# Code to convert json to CSV
```{r}
# steam <- fromJSON("..\\data\\data_raw\\steam.jsonmdb", simplifyDataFrame = TRUE)
# 
# write.csv(steam, "..\\data\\data_clean\\steam.jsonmdb")
```


# Reading in Data for cleaning
```{r}
steamData <- read_csv("../data/data_clean/steam.csv")
```


# Overview of data
```{r}
# skim(steamData)
# steamData %>% pull(platforms) %>% unique()
```


# cleaning data
```{r}
# remove unused columns and make price variable cleaner, as well as gfg_rating changes
steamDataClean <- steamData %>% 
  select(-store_url, -store_promo_url, -...1, -image, -voiceovers, -achievements, -gfq_url, -gfq_difficulty_comment, -gfq_rating_comment, -gfq_length_comment, -stsp_owners, -stsp_mdntime, -hltb_url, -hltb_single, -hltb_complete, -meta_url, -igdb_url, -igdb_single, -igdb_complete, -published_meta, -published_hltb, -published_stsp, -published_igdb) %>% 
  mutate(
    full_price = full_price/100,
    discount = discount/100,
    current_price = current_price/100) %>% 
    filter(full_price <= 200) %>%  # Only 2 games with full_price > 199.99
  mutate(gfq_rating = gfq_rating*20)  # scales gfq_rating to be on the 0-100 scale
```


# wider dataset, filtered for genre related work
```{r}
# pivot dataset based on genres, split by ","
steamDataGenres <- steamDataClean %>% 
  mutate(genres = str_split(genres, ",")) %>% 
  unnest() %>% 
  pivot_wider(names_from = genres, values_from = genres)
```


# steamDataDevelopers for getting dev size
```{r}
# Code for getting developer size
steamDataDevelopers <- steamDataClean %>% 
  group_by(developers) %>% 
  mutate(developer_size = n()) %>% 
  ungroup() %>% 
  mutate(size_cat = cut(developer_size, breaks = 2))
```


#---------------------

# functions

## genre stats
```{r}
genre_stats <- function(metric, source, genre) {
  data <- steamDataGenres %>%
    filter(genre == genre) %>%
    drop_na(any_of(c(genre, source, metric))) %>% 
    select(any_of(c(source, metric)))
  
  mod <- lm(as.formula(str_c(metric, " ~ ", source)), data)
  
  stats <- list(
    genre = genre,
    source = source,
    coef = coef(mod)[2],
    max = confint(mod)[source, "97.5 %"],
    min = confint(mod)[source, "2.5 %"],
    cor = cor(data)[source, metric]
  )
  
  return(stats)
}
```


## source stats
```{r}
source_stats <- function(source1, source2) {
  data <- steamDataGenres %>% 
    select(any_of(c(source1, source2))) %>% 
    drop_na(any_of(c(source1, source2)))
  
  mod <- lm(as.formula(str_c(source1, " ~ ", source2)), data)
  
  stats <- list(
    source1 = source1,
    source2 = source2,
    coef = coef(mod)[2],
    max = confint(mod)[source2, "97.5 %"],
    min = confint(mod)[source2, "2.5 %"],
    cor = cor(data)[source2, source1]
  )
  
  return(stats)
}
```

#------------------


# source correlation
```{r}
sources2 <- c("igdb_uscore", "meta_uscore", "store_uscore", "grnk_score")
inputs2 <- combn(sources2, 2) %>% 
  t() %>% 
  as.data.frame()

source_cor <- map2(inputs2$V1, inputs2$V2, source_stats) %>% 
  bind_rows() %>% 
  filter(cor == unique(cor)) %>% 
  mutate(sources = str_c(source1, ", ", source2))
```


# average price
```{r}
avg_price <- steamDataClean %>%  
  mutate(published_store = ymd(published_store)) %>%
  mutate(year = year(published_store)) %>% 
  group_by(year) %>% 
  mutate(avg_price = mean(full_price), cases = n()) %>% 
  filter(year > 2009)
```


# correlations
```{r}
correlations <- steamDataGenres %>% 
  select("igdb_score", "meta_score", "igdb_uscore", "meta_uscore", "store_uscore", "gfq_rating") %>%
  rename("IGDB" = igdb_score, 
         "Metacritic" = meta_score, 
         "IGDB Users" = igdb_uscore, 
         "Metacritic Users" = meta_uscore, 
         "Steam Users" = store_uscore,
         "GameFAQs" = gfq_rating) %>% 
  drop_na() %>% 
  cor()
```


# score averages
```{r}
score_avg <- steamDataGenres %>%
  pivot_longer(cols = c(meta_score, meta_uscore, igdb_score, igdb_uscore), names_to = "score_name") %>% 
  group_by(score_name) %>% 
  summarize(avg = mean(value, na.rm = TRUE)) %>% 
  mutate(score_type = ifelse(str_detect(score_name, "uscore"), "Critic Rating", "User Rating")) %>% 
  mutate(source = ifelse(str_detect(score_name, "igdb"), "IGDB", "Metacritic"))
```


# pop price genre
```{r}
genres <- c("Action", "Adventure", "Casual", "Racing", "Indie", "RPG", "Simulation")
sources <- c("igdb_uscore", "meta_uscore", "store_uscore")
inputs <- expand_grid(genres, sources)

pop_price_genre <- map2(inputs$sources, inputs$genres, genre_stats, metric = "full_price") %>% 
  bind_rows()
```


# CLEANING DATA END -----------------------------------------------------------------------------------------------------------------------------

********

# WRITING/SAVING DATA START ---------------------------------------------------------------------------------------------------------------------


These saves will save the cleaned datasets to the data_clean folder within the folder structure. Path structure may vary based on OS (Windows 11/10 used here)


# steamDataClean save
```{r}
# write.csv(steamDataClean, file = "../data/data_clean/steamDataClean.csv", row.names = FALSE)
```


# steamDataGenres save
```{r}
# write.csv(steamDataGenres, file = "../data/data_clean/steamDataGenres.csv", row.names = FALSE)
```


# steam data developers csv
```{r}
# write.csv(steamDataDevelopers, file = "../data/data_clean/steamDataDevelopers.csv", row.names = FALSE)
```


# correlations csv
```{r}
# write.csv(source_cor, file = "../data/data_clean/source_cor.csv", row.names = FALSE)
```


# avg price csv
```{r}
# write.csv(avg_price, file = "../data/data_clean/avg_price.csv", row.names = FALSE)
```


# correlations csv (do not run)
```{r}
# write.csv(correlations, file = "../data/data_clean/correlations.csv", row.names = FALSE)
```


# score av save
```{r}
# write.csv(score_avg, file = "../data/data_clean/score_avg.csv", row.names = FALSE)
```


# pop price genre save
```{r}
# write.csv(pop_price_genre, file = "../data/data_clean/pop_price_genre.csv", row.names = FALSE)
```



